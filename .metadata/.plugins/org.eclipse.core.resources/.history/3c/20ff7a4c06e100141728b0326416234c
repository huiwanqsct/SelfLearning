// HashSet尝试，直接使用"=" 只能实现浅层拷贝，注解地方代码已经证明了这个事实
// 
package self.learning;

import java.util.HashSet;
import java.util.Set;

public class TestHashSet {
	public static void main(String[] args)
	{
		Set<String> setA = new HashSet<String>();
		Set<String> setB = new HashSet<String>();
		setA.add("George");
		setA.add("Jim");
		setA.add("John");
		setA.add("Blake");
		setA.add("Kevin");
		setA.add("Mechael");
		
		setB.add("George");
		setB.add("Katie");
		setB.add("Kevin");
		setB.add("Michelle");
		setB.add("Ryan");
		
//		Set<String> tempA = setA;
//		Set<String> tempB = setB;
		
//		System.out.println("setA: " + setA);
//		System.out.println("setB: " + setB);
//		System.out.println("tempA: " + tempA);
//		System.out.println("tempB: " + tempB);
//		
//		tempA.remove("George");
//		tempB.add("Angel");
//		
//		System.out.println("setA: " + setA);
//		System.out.println("setB: " + setB);
//		System.out.println("tempA: " + tempA);
//		System.out.println("tempB: " + tempB);
		
		Set<String> tempA = new HashSet<String>();
		Set<String> tempB = new HashSet<String>();
		tempA.addAll(setA);
		tempB.addAll(setB);
		System.out.println("原: " + setA);
		
		// 交
		setA.retainAll(setB);
		System.out.println("交: " + setA);
		
		// 并
		setA.addAll(tempA);
		setA.addAll(setB);
		System.out.println("并: " + setA);
		
		// 差
		setA.clear();
		setA.addAll(tempA);
		setA.retainAll(setB);
		System.out.println("差: " + setA);
		
		// 恢复
		setA.clear();
		setA.addAll(tempA);
		System.out.println("原: " + setA);
	}
}








